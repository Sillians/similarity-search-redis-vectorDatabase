import numpy as np
from textwrap import TextWrapper
from redis_client import client_redis
from data_processing import data
from sentence_transformers import SentenceTransformer

def model():
    embedder = SentenceTransformer('msmarco-distilbert-base-v4')
    return embedder


# Vectorize all of the Bikes Descriptions
def vector_embedding():
    client = client_redis()
    embedder = model()

    keys = sorted(client.keys('bikes:*'))
    # print(keys)
    descriptions = client.json().mget(keys, '$.description')
    descriptions = [item for sublist in descriptions for item in sublist]
    embeddings = embedder.encode(descriptions).astype(np.float32).tolist()
    return embeddings


# Extract the length of the vector embeddings generated by the model
def vector_dimension() -> int:
    bikes = data()
    embedder = model()

    sample_description = bikes[0]['description']
    TextWrapper(width=120).wrap(sample_description)
    embedding = embedder.encode(sample_description)

    VECTOR_DIMENSION = len(embedding)
    return VECTOR_DIMENSION


if __name__ == "__main__":
    vector_embedding()

# vect = vector_embedding()
# print(vect)