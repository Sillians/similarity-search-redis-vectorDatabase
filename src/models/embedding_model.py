import numpy as np
from textwrap import TextWrapper
from typing import Any
from src.utils.redis_client import RedisClient
from src.data.data_loader import BikeDataLoader
from src.models.similarity_model import SimilarityModel
from src.utils.logger import get_logger
from src.utils.config import get_config

class VectorEmbedding:
    def __init__(self):
        self.config = get_config()
        self.logger = get_logger("Vector embedding and vector dimension generation")
        self.logger.info("Load the embedder model, redis client and the bikes data...")
        self.embedder = SimilarityModel().load_model()
        self.client = RedisClient().connect()
        self.bikes = BikeDataLoader().load_data()

    def vector_embedding(self) -> Any:
        self.logger.info("Vectorize all of the Bikes Descriptions")
        keys = sorted(self.client.keys(self.config.CLIENT_KEYS))
        descriptions = self.client.json().mget(keys, '$.description')
        descriptions = [item for sublist in descriptions for item in sublist]
        embeddings = self.embedder.encode(descriptions).astype(np.float32).tolist()
        self.logger.info("Vector embeddings of all the Bikes descriptions")
        return embeddings

    def vector_dimension(self) -> int:
        self.logger.info("Extract the length of the vector embeddings generated by the model")
        sample_description = self.bikes[0]['description']
        TextWrapper(width=120).wrap(sample_description)
        embedding = self.embedder.encode(sample_description)
        vector_dimension = len(embedding)
        self.logger.info("Length of the vector dimension embeddings generated by the model")
        return vector_dimension
